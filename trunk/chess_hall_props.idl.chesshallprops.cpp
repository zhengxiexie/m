//Generated by ubrpcgen
//This file is generated automatically from idl file
//Do not edit this file, since any modification will be lost when this
//file is regenerated
#include "chess_hall_props.idl.chesshallprops.h"
namespace idl
{
	const char * const chesshallprops_servlet_trunk::ERROR_MSG []  = {
	};
	int chesshallprops_servlet_trunk::setError(unsigned int err_no, const char * data)
	{
		if (err_no == 0)
		{
			return 0;
		}
		if ((size_t)err_no < sizeof(ubrpc::ERROR_MSG)/sizeof(char *))
		{
			setErrorMsgPtr(ERROR_MSG[err_no], data);
			return 0;
		}
		else
		{
			return -1;
		}
	}
	int chesshallprops_servlet_trunk::dispatch(int64_t, const char * function, const mc_pack_t * param, mc_pack_t * result)
	{
		if (0 == strcmp(function, "obtain_commodity"))
		{
			chesshallprops_obtain_commodity_params param_idl(getMempool());
			if (param != 0)
			{
				param_idl.load(param);
			}
			chesshallprops_obtain_commodity_response response_idl(getMempool());
			if (obtain_commodity(param_idl, response_idl))
			{
				CWARNING_LOG("%s", "user function error");
				return -1;
			}
			if (isError())
			{
				CWARNING_LOG("%s", "user error set");
				return writeError(result);
			}
			else
			{
				response_idl.save(result);
				return 0;
			}
		}
		if (0 == strcmp(function, "obtain_exchange_code"))
		{
			chesshallprops_obtain_exchange_code_params param_idl(getMempool());
			if (param != 0)
			{
				param_idl.load(param);
			}
			chesshallprops_obtain_exchange_code_response response_idl(getMempool());
			if (obtain_exchange_code(param_idl, response_idl))
			{
				CWARNING_LOG("%s", "user function error");
				return -1;
			}
			if (isError())
			{
				CWARNING_LOG("%s", "user error set");
				return writeError(result);
			}
			else
			{
				response_idl.save(result);
				return 0;
			}
		}
		if (0 == strcmp(function, "use_exchange_code"))
		{
			chesshallprops_use_exchange_code_params param_idl(getMempool());
			if (param != 0)
			{
				param_idl.load(param);
			}
			chesshallprops_use_exchange_code_response response_idl(getMempool());
			if (use_exchange_code(param_idl, response_idl))
			{
				CWARNING_LOG("%s", "user function error");
				return -1;
			}
			if (isError())
			{
				CWARNING_LOG("%s", "user error set");
				return writeError(result);
			}
			else
			{
				response_idl.save(result);
				return 0;
			}
		}
		CWARNING_LOG("%s", "method not found");
		return -1;
	}
}
